--- 
wordpress_id: 100
layout: post
title: "Git tips: work on local branches"
wordpress_url: http://jackdempsey.me/?p=100
---

h1. {{ page.title }}

<em>This is one of several posts designed for those of you who've migrated from svn to git, but find your workflow and patterns to be very 'svn like'.</em> 

There's basically no reason you shouldn't do your local work on a branch. If you have a small feature touching a couple files, just create a branch and do your work on it. Remember, this is git, you don't have to remember what revision you branched at when you merge back in later (ugh svn), it's fast as hell, and no one will ever see that you created it either!

Here's why this is important and useful. Let's say you're working on master. You've made a few commits and you're getting ready to finish when someone says "fix this quick and push it please". Ok, so you make that change and you're stuck: you're not ready to push your other commits, just this recent one. What do you do? (I can go over how to get out of this if anyone's curious). This wouldn't happen if you had just done your new feature on a local branch and then rebased against master. Easy.

How about something similar: you're doing your work on master, committing as you go, and then hear that an important fix has been pushed to origin and that you should bring it down. Well, you think, I can easily just git pull --rebase right? Sure...except what if you had another branch that you HAD rebase against master in trying to keep things clean. Now you're in a bind: if you rebase master, the changes you brought into this other branch will mis-match: same content but different sha's, and you'll be stuck doing some sort of git cherry pick attempt at undoing things. Again, just because you didn't work on a local topic branch.

This is not to say that you can't work on master. If it's a one file fix, go ahead! But if you think you're going to be working on it for even a little, do yourself a favor and type "git checkout -b practicing_good_habits" and get to it.
